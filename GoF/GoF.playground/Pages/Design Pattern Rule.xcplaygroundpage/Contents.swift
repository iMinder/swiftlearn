//: [Previous](@previous)
/*:
 ## 设计模式原则
 1. 单一原则
 遵循单一职责原则。分别建立两个类T1、T2，使T1完成职责P1功能，T2完成职责P2功能。这样，当修改类T1时，不会使职责P2发生故障风险；同理，当修改T2时，也不会使职责P1发生故障风险。
 2. 里氏替换原则
 如果对每一个类型为 T1的对象 o1，都有类型为 T2 的对象o2，使得以 T1定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。
 子类可以扩展父类的功能，但不能改变父类原有的功能
 - 子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。
 - 子类中可以增加自己特有的方法。
 - 当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。
 - 当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。

 3. 依赖倒置原则 高层模块不应该依赖低层模块，二者都应该依赖其抽象；抽象不应该依赖细节；细节应该依赖抽象。
    依赖倒置原则的核心思想是面向接口编程，不面向具体的实现
    - 低层模块尽量都要有抽象类或接口，或者两者都有。
    - 变量的声明类型尽量是抽象类或接口。
    - 使用继承时遵循里氏替换原则。
 4. 接口隔离原则 客户端不应该依赖它不需要的接口；一个类对另一个类的依赖应该建立在最小的接口上。
    和单一原则很像，但是面向的是接口，主要是对抽象，对程序整体的框架设计,而单一原则约束的类，针对的是实现和细节。
 5. 迪米特法则 个对象应该对其他对象保持最少的了解。降低类之间的耦合度。 低耦合，高内聚
 6. 开闭原则 一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。
    多用扩展来实现变化，尽量避免修改已有的代码来处理。
 */
//: [Next](@next)
